#include <stdio.h>

int setBit(int num, int pos) {
    return num | (1 << pos);
}

int main() {
    int n, p, res;
    printf("Num: ");
    scanf("%d", &n);
    printf("Pos: ");
    scanf("%d", &p);
    res = setBit(n, p);
    printf("Orig: %d, Mod: %d\n", n, res);
    return 0;
}


#include <stdio.h>

void findUnique(int arr[], int n) {
    int xor = 0, a = 0, b = 0, mask;
    for (int i = 0; i < n; i++) xor ^= arr[i];
    mask = xor & -xor;
    for (int i = 0; i < n; i++) {
        if (arr[i] & mask) a ^= arr[i];
        else b ^= arr[i];
    }
    printf("%d %d\n", a, b);
}

int main() {
    int arr[] = {4, 5, 4, 6, 7, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    findUnique(arr, n);
    return 0;
}





#include <stdio.h>

int isPowerOfTwo(int n) {
    return n > 0 && (n & (n - 1)) == 0;
}

int main() {
    int n;
    printf("Num: ");
    scanf("%d", &n);
    printf("%s\n", isPowerOfTwo(n) ? "Yes" : "No");
    return 0;
}

#include <stdio.h>

int findSetBitPos(int n) {
    return (n > 0 && (n & (n - 1)) == 0) ? __builtin_ctz(n) + 1 : -1;
}

int main() {
    int n;
    printf("Num: ");
    scanf("%d", &n);
    int pos = findSetBitPos(n);
    printf("%d\n", pos);
    return 0;
}


#include <stdio.h>

int countFlips(int a, int b) {
    int xor = a ^ b, count = 0;
    while (xor) {
        count += xor & 1;
        xor >>= 1;
    }
    return count;
}

int main() {
    int a, b;
    printf("A: ");
    scanf("%d", &a);
    printf("B: ");
    scanf("%d", &b);
    printf("%d\n", countFlips(a, b));
    return 0;
}
#include <stdio.h>

int square(int n) {
    int res = 0, temp = n;
    while (temp > 0) {
        res += n;
        temp--;
    }
    return res;
}

int main() {
    int n;
    printf("Num: ");
    scanf("%d", &n);
    printf("%d\n", square(n));
    return 0;
}



